{"version":3,"sources":["api.js","InputForm.js","Emoji.js","App.js","serviceWorker.js","index.js"],"names":["api","send_sms","options","window","fetch","method","headers","body","JSON","stringify","then","data","error","console","log","Error","InputForm","props","handleChange","event","target","name","value","setState","state","disabled","succeeded","processing","failed","handleSubmit","bind","ev","preventDefault","this","sender_name","number","sender_number","message","sender_message","catch","err","className","onSubmit","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","type","placeholder","autoComplete","onChange","renderForm","Component","Emoji","role","aria-label","label","aria-hidden","symbol","App","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAuBeA,G,MAJH,CACRC,SApBa,SAAAC,GACb,OAAOC,OACFC,MADE,WACgB,CACfC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUP,KAExBQ,MAAK,SAAAC,GACF,IAAKA,GAAQA,EAAKC,MAEd,MADAC,QAAQC,IAAI,cAAe,CAAEH,SACvBI,MAAO,aAEb,OAAOJ,QCiGRK,E,YAzGX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAYVC,aAAe,SAAAC,GAAU,IAAD,EACEA,EAAMC,OAArBC,EADa,EACbA,KAAMC,EADO,EACPA,MAEb,EAAKC,SAAL,eACKF,EAAQC,KAdb,EAAKE,MAAQ,CACTC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,QAAQ,GAGZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAVL,E,0EAqBAC,G,6EACfA,EAAGC,iBAEHhC,EACKC,SAAS,CACNoB,KAAMY,KAAKT,MAAMU,YACjBC,OAAQF,KAAKT,MAAMY,cACnBC,QAASJ,KAAKT,MAAMc,iBAEvBC,OAAM,SAAAC,GACH,EAAKjB,SAAS,CAACX,MAAO4B,EAAIH,a,oFAsBlC,OACI,yBAAKI,UAAU,mCACX,0BAAMC,SAAUT,KAAKJ,cACjB,qEACA,yBAAKY,UAAU,kBAAkBE,MApBjC,CACRC,KAAM,CACJC,MAAO,UACPC,WAAY,0CACZC,cAAe,cACfC,SAAU,OACV,gBAAiB,CACfH,MAAO,YAGXI,QAAS,CACPJ,MAAO,UACPK,UAAW,aASD,yBAAKT,UAAU,uBACX,2BACIU,KAAK,OACL9B,KAAK,cACL+B,YAAY,6CACZC,aAAa,aACbZ,UAAU,WACVa,SAAUrB,KAAKf,eAEnB,2BACIiC,KAAK,OACL9B,KAAK,gBACL+B,YAAY,0CACZC,aAAa,aACbZ,UAAU,WACVa,SAAUrB,KAAKf,eAEnB,2BACIiC,KAAK,OACL9B,KAAK,iBACL+B,YAAY,mCACZC,aAAa,aACbZ,UAAU,WACVa,SAAUrB,KAAKf,iBAGrBe,KAAKT,MAAME,WACT,4BAAQe,UAAU,MAAMhB,SAAUQ,KAAKT,MAAMC,UACxCQ,KAAKT,MAAMG,WAAa,aAAe,a,+BAUhE,OACI,8BACMM,KAAKT,MAAME,WAAaO,KAAKsB,kB,GApGvBC,aCSTC,EAXD,SAAAxC,GAAK,OACf,0BACIwB,UAAU,QACViB,KAAK,MACLC,aAAY1C,EAAM2C,MAAQ3C,EAAM2C,MAAQ,GACxCC,cAAa5C,EAAM2C,MAAQ,QAAU,QAEpC3C,EAAM6C,SCgBAC,MAnBf,WACE,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cACd,gDAAqB,kBAAC,EAAD,CAAOqB,OAAO,iBAAnC,MAA4C,kBAAC,EAAD,CAAOA,OAAO,iBAA1D,OAAoE,uBAAGE,KAAK,0BAA0BvB,UAAU,IAA5C,SAApE,MAEF,yBAAKA,UAAU,YACb,6DACA,mDACA,mDACA,kBAAC,EAAD,OAEJ,4BAAQA,UAAU,cAChB,uDCPYwB,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,MAAK,SAAAkE,GACjCA,EAAaC,iB","file":"static/js/main.3f9969cb.chunk.js","sourcesContent":["const send_sms = options => {\n    return window\n        .fetch(`/web-sms`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(options)\n        })\n        .then(data => {\n            if (!data || data.error) {\n                console.log(\"API Error: \", { data });\n                throw Error (\"API Error\");\n            } else {\n                return data;\n            }\n        });\n};\n\nconst api = {\n    send_sms : send_sms\n};\n\nexport default api;","import React, { Component } from \"react\";\nimport './InputForm.css';\nimport api from './api.js';\n\nclass InputForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            disabled: false,\n            succeeded: false,\n            processing: false,\n            failed: false\n        }\n        \n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange = event => {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name] : value\n        });\n    }\n\n    async handleSubmit(ev){\n        ev.preventDefault();\n\n        api\n            .send_sms({\n                name: this.state.sender_name,\n                number: this.state.sender_number,\n                message: this.state.sender_message\n            })\n            .catch(err => {\n                this.setState({error: err.message});\n            });\n\n    }\n\n    renderForm() {\n        var style = {\n            base: {\n              color: \"#32325d\",\n              fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n              fontSmoothing: \"antialiased\",\n              fontSize: \"16px\",\n              \"::placeholder\": {\n                color: \"#aab7c4\"\n              }\n            },\n            invalid: {\n              color: \"#fa755a\",\n              iconColor: \"#fa755a\"\n            }\n          };\n\n        return (\n            <div className=\"full-container vertical-center \">\n                <form onSubmit={this.handleSubmit}>\n                    <h4>Enter your details and message below.</h4>\n                    <div className=\"sr-combo-inputs\" style={style}>\n                        <div className=\"sr-combo-inputs-row\">\n                            <input\n                                type=\"text\"\n                                name=\"sender_name\"\n                                placeholder=\"Name - This will tell Steve who's texting.\"\n                                autoComplete=\"cardholder\"\n                                className=\"sr-input\"\n                                onChange={this.handleChange}\n                            />\n                            <input\n                                type=\"text\"\n                                name=\"sender_number\"\n                                placeholder=\"Your number - Format like +12244878383.\"\n                                autoComplete=\"cardholder\"\n                                className=\"sr-input\"\n                                onChange={this.handleChange}\n                            />\n                            <input\n                                type=\"text\"\n                                name=\"sender_message\"\n                                placeholder=\"Your message. 140 character max.\"\n                                autoComplete=\"cardholder\"\n                                className=\"sr-input\"\n                                onChange={this.handleChange}\n                            />\n                        </div>\n                        {!this.state.succeeded && (\n                            <button className=\"btn\" disabled={this.state.disabled}>\n                                {this.state.processing ? \"Sending...\" : \"Send\"}\n                            </button>\n                        )}\n                    </div>\n                </form>\n            </div>\n        ) \n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.succeeded && this.renderForm()}\n            </div>\n        );\n    }\n    \n}\n\nexport default InputForm;","import React from 'react';\n\nconst Emoji = props => (\n    <span\n        className=\"emoji\"\n        role=\"img\"\n        aria-label={props.label ? props.label : \"\"}\n        aria-hidden={props.label ? \"false\" : \"true\"}\n    >\n        {props.symbol}\n    </span>\n);\n\nexport default Emoji;","import React from 'react';\nimport './App.css';\nimport './index.css';\nimport InputForm from './InputForm';\nimport Emoji from './Emoji';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <p>An app to send an <Emoji symbol=\"☎️\"/>SMS<Emoji symbol=\"☎️\"/> to <a href=\"http://www.stevehind.me\" className=\"\">Steve</a>.</p>\n      </header>\n        <div className=\"App-body\">\n          <h3>Just like using your phone...</h3>\n          <h4>...except a web app</h4>\n          <h5>...and also dumber.</h5>\n          <InputForm/>\n        </div>\n      <footer className=\"App-footer\">\n        <p>©Steve Hind, 2020.</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}